// Copyright (c) 2019 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
const fs = require('fs');
const path = require('path');
const {walkDir, dump} = require('../../scripts/file-utils');

const ROOT_DIR = path.resolve(__dirname, '../..');

function getSchemaExamples() {
  const moduleDir = path.resolve(ROOT_DIR, 'modules/schema');
  const examplesMap = walkDir(path.resolve(moduleDir, 'examples/'), '.json');
  const invalidExamplesMap = walkDir(path.resolve(moduleDir, 'invalid/'), '.json');
  dump(
    {
      'Auto-Generated by modules/schema build command - DO NOT EDIT': true,
      examples: Object.keys(examplesMap),
      invalid: Object.keys(invalidExamplesMap)
    },
    path.resolve(__dirname, './schema/examples.json')
  );
}

// We do not transpile source when running test
// This breaks the inline worker source import
// We redirect the import to this placeholder file with `aliases` in ocular-dev-tools.config.js
function getWorker() {
  const workerSource = fs.readFileSync(
    path.resolve(ROOT_DIR, 'modules/parser/dist/workers/stream-data.worker.js'),
    'utf-8'
  );
  fs.writeFileSync(
    path.resolve(__dirname, './parser/stream-data.worker.js'),
    `export default ${JSON.stringify(workerSource)}`
  );
}

getSchemaExamples();
getWorker();
